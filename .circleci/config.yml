# Configuration file for https://circleci.com/gh/angular/universal

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

var_1: &docker_image angular/ngcontainer:0.6.0
var_2: &cache_key nguniversal-{{ .Branch }}-{{ checksum "yarn.lock" }}-0.6.0

# Define common ENV vars
var_3: &define_env_vars
  run: echo "export PROJECT_ROOT=$(pwd)" >> $BASH_ENV

# See remote cache documentation in /docs/BAZEL.md
var_4: &setup-bazel-remote-cache
  run:
    name: Start up bazel remote cache proxy
    command: ~/bazel-remote-proxy -backend circleci://
    background: true

# Settings common to each job
anchor_1: &job_defaults
  working_directory: ~/ng
  docker:
  - image: *docker_image

# After checkout, rebase on top of master.
# Similar to travis behavior, but not quite the same.
# By default, PRs are not rebased on top of master, which we want.
# See https://discuss.circleci.com/t/1662
anchor_2: &post_checkout
  post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

version: 2

jobs:
  build:
    <<: *job_defaults
    resource_class: xlarge
    steps:
    - checkout:
        <<: *post_checkout
    - restore_cache:
        key: *cache_key
    - run: bazel info release

    # Set up the CircleCI specific bazel configuration.
    - run: sudo cp ./.circleci/bazel.rc /etc/bazel.bazelrc

    # Build and Test
    # Use bazel query so that we explicitly ask for all buildable targets to
    # be built even though we run `bazel test`
    # See https://github.com/bazelbuild/bazel/issues/4257
    #- run: bazel query //... | xargs bazel test --config=ci
    - run: bazel test //...

    # If we get this far, save the node_modules directory for use next time.
    - save_cache:
        key: *cache_key
        paths:
        - "node_modules"
        - "~/bazel_repository_cache"
  lint:
    <<: *job_defaults
    steps:
    - checkout:
        <<: *post_checkout
    # Enforce that BUILD files are formatted. Note that this uses the version of buildifier
    # from the docker image above - take care that you use the same version when you run
    # buildifier locally on your change.
    - run: 'yarn buildifier -mode=check ||
            (echo "BUILD files not formatted. Please run ''yarn buildifier''" ; exit 1)'

    - restore_cache:
        key: *cache_key

    # TODO: Don't do this
    - run: yarn install --frozen-lockfile --non-interactive
    - run: yarn lint

  # This job exists only for backwards-compatibility with old scripts and tests
  # that rely on the pre-Bazel dist/modules-dist layout.
  # It duplicates some work with the job above: we build the bazel packages
  # twice. Even though we have a remote cache, these jobs will typically run in
  # parallel so up-to-date outputs will not be available at the time the build
  # starts.
  # No new jobs should depend on this one.
  build-packages-dist:
    <<: *job_defaults
    resource_class: xlarge
    steps:
    - *define_env_vars
    - checkout:
        <<: *post_checkout
    - run: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
    - run: bazel run @nodejs//:yarn
    - run: scripts/build-modules-dist.sh

    # Save the npm packages from //modules/... for other workflow jobs to read
    # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
    - persist_to_workspace:
        root: dist
        paths:
        - modules-dist

  # We run the integration tests outside of Bazel for now.
  # They are a separate workflow job so that they can be easily re-run.
  # When the tests are ported to bazel test targets, they should move to the "test"
  # job above, as part of the bazel test command. That has flaky_test_attempts so the
  # need to re-run manually should be alleviated.
  # See comments inside the integration/run_tests.sh script.
  integration_test:
    <<: *job_defaults
    steps:
    - *define_env_vars
    - checkout:
        <<: *post_checkout
    - attach_workspace:
        at: dist
    - restore_cache:
        key: *cache_key
    - run: xvfb-run --auto-servernum ./integration/run_tests.sh

workflows:
  version: 2
  default_workflow:
    jobs:
    - build
    - lint
    - build-packages-dist
    - integration_test:
        requires:
        - build-packages-dist

general:
  branches:
    only:
    - master
    # 5.2.x, 6.0.x, etc
    - /\d+\.\d+\.x/
    # 5.x, 6.x, etc
    - /\d+\.x/
